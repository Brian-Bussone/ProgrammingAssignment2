library(datasets)
data(iris)
?iris
str(iris)
mean(iris$Sepal.Length)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
foo <- subset(iris, iris$Species == "virginica")
str(foo)
mean(foo$Sepal.Length)
?rowMeans
rowMeans(iris[, 1:4])
head(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
mean(iris$Sepal.Length)
?apply
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
## The following function calculates the mean of the special "vector"
## created with the above function. However, it first checks to see
## if the mean has already been calculated. If so, it gets the mean
## from the cache and skips the computation. Otherwise, it calculates
## the mean of the data and sets the value of the mean in the cache
## via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
}
}
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
## The following function calculates the mean of the special "vector"
## created with the above function. However, it first checks to see
## if the mean has already been calculated. If so, it gets the mean
## from the cache and skips the computation. Otherwise, it calculates
## the mean of the data and sets the value of the mean in the cache
## via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?cachmean
?cachemean
cachemean
cachemean
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix", which is really a list
## containing a function to
##  1.set the value of the matrix
##  2.get the value of the matrix
##  3.set the value of its inverse
##  4.get the value of its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
## For this assignment, assume that the matrix supplied is always invertible.
cacheSolve <- function(x, ...) {
## NOTE: Computing the inverse of a square matrix can be done with the
## solve function in R. For example, if X is a square invertible matrix,
## then solve(X) returns its inverse.
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(int)
inv
}
## This function creates a special "vector", which is really a list
## containing a function to
##  1.set the value of the vector
##  2.get the value of the vector
##  3.set the value of the mean
##  4.get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
## The following function calculates the mean of the special "vector"
## created with the above function. However, it first checks to see
## if the mean has already been calculated. If so, it gets the mean
## from the cache and skips the computation. Otherwise, it calculates
## the mean of the data and sets the value of the mean in the cache
## via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheSolve(c(5,2,-7,-3))
makeCacheMatrix(c(5,2,-7,-3))
cacheSolve(makeCacheMatrix(c(5,2,-7,-3)))
